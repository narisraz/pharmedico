datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    String @id @default(cuid())
  email String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password Password?
  Doctor   Doctor?
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Address {
  id String @id @default(cuid())

  city    String?
  country String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Doctor Doctor[]
}

model Telephone {
  id     String @id @default(cuid())
  number Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Doctor   Doctor? @relation(fields: [doctorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  doctorId String?
}

model AcademicBackground {
  id    String @id @default(cuid())
  title String

  date            DateTime?
  graduationPlace String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Doctor    Doctor?  @relation(fields: [doctorId], references: [id])
  doctorId  String?
}

model DoctorSpeciality {
  id    String @id @default(cuid())
  label String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Doctor   Doctor? @relation(fields: [doctorId], references: [id])
  doctorId String?
}

model Doctor {
  id        String @id @default(cuid())
  name      String
  firstName String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  telephones          Telephone[]
  specialities        DoctorSpeciality[]
  academicBackgrounds AcademicBackground[]
  address             Address?             @relation(fields: [addressId], references: [id])
  addressId           String
  user                User?                @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId              String?              @unique
}
